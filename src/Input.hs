{-# LANGUAGE Arrows #-}
module Input (getInput, updateKey, keyboard) where

  import qualified Graphics.Gloss.Interface.Pure.Game as G
  
  import Types

  keyboard = Key{keyF1 = None
               , keyF2 = None
               , keyF3 = None
               , keyF4 = None
               , keyF5 = None
               , keyF6 = None
               , keyF7 = None
               , keyF8 = None
               , keyF9 = None
               , keyF10 = None
               , keyF11 = None
               , keyF12 = None
               , keyPAD0 = None
               , keyPAD1 = None
               , keyPAD2 = None
               , keyPAD3 = None
               , keyPAD4 = None
               , keyPAD5 = None
               , keyPAD6 = None
               , keyPAD7 = None
               , keyPAD8 = None
               , keyPAD9 = None
               , keyMINUS = None
               , keyPLUS = None
               , keyTAB = None
               , keyESC = None
               , keyHOME = None
               , keyPGUP = None
               , keyPGDOWN = None
               , keyINSERT = None
               , keyDELETE = None
               , keyENTER = None
               , keyBACKSPACE = None
               , keyLCTRL = None
               , keyRCTRL = None
               , keyLALT = None
               , keyRALT = None
               , keyLSHIFT = None
               , keyRSHIFT = None
               , keySPACE = None
               , keyUP = None
               , keyDOWN = None
               , keyLEFT = None
               , keyRIGHT = None
               , keyA = None
               , keyB = None
               , keyC = None
               , keyD = None
               , keyE = None
               , keyF = None
               , keyG = None
               , keyH = None
               , keyI = None
               , keyJ = None
               , keyK = None
               , keyL = None
               , keyM = None
               , keyN = None
               , keyO = None
               , keyP = None
               , keyQ = None
               , keyR = None
               , keyS = None
               , keyT = None
               , keyU = None
               , keyV = None
               , keyW = None
               , keyX = None
               , keyY = None
               , keyZ = None
               , keyLMOUSE = None
               , keyRMOUSE = None
               , keyMIDMOUSE = None
               , keyWHEELUP = None
               , keyWHEELDOWN = None}

  getInput :: (gs, Key) -> (Event Input) -> (gs, Key)
  getInput (gs, kb) = arr $ \event ->
    case event of
      Event (G.EventKey (G.SpecialKey G.KeyF1) G.Up _ _) -> (gs, kb{keyF1 =  KeyUp}) 
      Event (G.EventKey (G.SpecialKey G.KeyF2) G.Up _ _) -> (gs, kb{keyF2 =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyF3) G.Up _ _) -> (gs, kb{keyF2 =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyF4) G.Up _ _) -> (gs, kb{keyF4 =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyF5) G.Up _ _) -> (gs, kb{keyF5 =  KeyUp}) 
      Event (G.EventKey (G.SpecialKey G.KeyF6) G.Up _ _) -> (gs, kb{keyF6 =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyF7) G.Up _ _) -> (gs, kb{keyF7 =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyF8) G.Up _ _) -> (gs, kb{keyF8 =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyF9) G.Up _ _) -> (gs, kb{keyF9 =  KeyUp}) 
      Event (G.EventKey (G.SpecialKey G.KeyF10) G.Up _ _) -> (gs, kb{keyF10 =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyF11) G.Up _ _) -> (gs, kb{keyF11 =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyF12) G.Up _ _) -> (gs, kb{keyF12 =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyUp) G.Up _ _) -> (gs, kb{keyUP =  KeyUp}) 
      Event (G.EventKey (G.SpecialKey G.KeyDown) G.Up _ _) -> (gs, kb{keyDOWN =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyLeft) G.Up _ _) -> (gs, kb{keyLEFT =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyRight) G.Up _ _) -> (gs, kb{keyRIGHT =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyTab) G.Up _ _) -> (gs, kb{keyTAB =  KeyUp}) 
      Event (G.EventKey (G.SpecialKey G.KeyEsc) G.Up _ _) -> (gs, kb{keyESC =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyHome) G.Up _ _) -> (gs, kb{keyHOME =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyPageUp) G.Up _ _) -> (gs, kb{keyRIGHT =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyPageDown) G.Up _ _) -> (gs, kb{keyPGUP =  KeyUp}) 
      Event (G.EventKey (G.SpecialKey G.KeyInsert) G.Up _ _) -> (gs, kb{keyPGDOWN =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyDelete) G.Up _ _) -> (gs, kb{keyDELETE =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyEnter) G.Up _ _) -> (gs, kb{keyENTER =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyBackspace) G.Up _ _) -> (gs, kb{keyBACKSPACE =  KeyUp}) 
      Event (G.EventKey (G.SpecialKey G.KeyCtrlL) G.Up _ _) -> (gs, kb{keyLCTRL =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyCtrlR) G.Up _ _) -> (gs, kb{keyRCTRL =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyAltL) G.Up _ _) -> (gs, kb{keyLALT =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyAltR) G.Up _ _) -> (gs, kb{keyRALT =  KeyUp}) 
      Event (G.EventKey (G.SpecialKey G.KeyShiftL) G.Up _ _) -> (gs, kb{keyLSHIFT =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeyShiftR) G.Up _ _) -> (gs, kb{keyRSHIFT =  KeyUp})
      Event (G.EventKey (G.SpecialKey G.KeySpace) G.Up _ _) -> (gs, kb{keySPACE =  KeyUp})
      Event (G.EventKey (G.Char 'A') G.Up _ _) -> (gs, kb{keyA =  KeyUp})
      Event (G.EventKey (G.Char 'B') G.Up _ _) -> (gs, kb{keyB =  KeyUp})
      Event (G.EventKey (G.Char 'C') G.Up _ _) -> (gs, kb{keyC =  KeyUp})
      Event (G.EventKey (G.Char 'D') G.Up _ _) -> (gs, kb{keyD =  KeyUp})
      Event (G.EventKey (G.Char 'E') G.Up _ _) -> (gs, kb{keyE =  KeyUp})
      Event (G.EventKey (G.Char 'F') G.Up _ _) -> (gs, kb{keyF =  KeyUp})
      Event (G.EventKey (G.Char 'G') G.Up _ _) -> (gs, kb{keyG =  KeyUp})
      Event (G.EventKey (G.Char 'H') G.Up _ _) -> (gs, kb{keyH =  KeyUp})
      Event (G.EventKey (G.Char 'I') G.Up _ _) -> (gs, kb{keyI =  KeyUp})
      Event (G.EventKey (G.Char 'J') G.Up _ _) -> (gs, kb{keyJ =  KeyUp})
      Event (G.EventKey (G.Char 'K') G.Up _ _) -> (gs, kb{keyK =  KeyUp})
      Event (G.EventKey (G.Char 'L') G.Up _ _) -> (gs, kb{keyL =  KeyUp})
      Event (G.EventKey (G.Char 'M') G.Up _ _) -> (gs, kb{keyM =  KeyUp})
      Event (G.EventKey (G.Char 'N') G.Up _ _) -> (gs, kb{keyN =  KeyUp})
      Event (G.EventKey (G.Char 'O') G.Up _ _) -> (gs, kb{keyO =  KeyUp})
      Event (G.EventKey (G.Char 'P') G.Up _ _) -> (gs, kb{keyP =  KeyUp})
      Event (G.EventKey (G.Char 'Q') G.Up _ _) -> (gs, kb{keyQ =  KeyUp})
      Event (G.EventKey (G.Char 'R') G.Up _ _) -> (gs, kb{keyR =  KeyUp})
      Event (G.EventKey (G.Char 'S') G.Up _ _) -> (gs, kb{keyS =  KeyUp})
      Event (G.EventKey (G.Char 'T') G.Up _ _) -> (gs, kb{keyT =  KeyUp})
      Event (G.EventKey (G.Char 'U') G.Up _ _) -> (gs, kb{keyU =  KeyUp})
      Event (G.EventKey (G.Char 'V') G.Up _ _) -> (gs, kb{keyV =  KeyUp})
      Event (G.EventKey (G.Char 'W') G.Up _ _) -> (gs, kb{keyW =  KeyUp})
      Event (G.EventKey (G.Char 'X') G.Up _ _) -> (gs, kb{keyX =  KeyUp})
      Event (G.EventKey (G.Char 'Y') G.Up _ _) -> (gs, kb{keyY =  KeyUp})
      Event (G.EventKey (G.Char 'Z') G.Up _ _) -> (gs, kb{keyZ =  KeyUp})

      Event (G.EventKey (G.SpecialKey G.KeyF1) G.Down _ _) -> (gs, kb{keyF1 = KeyDown}) 
      Event (G.EventKey (G.SpecialKey G.KeyF2) G.Down _ _) -> (gs, kb{keyF2 = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyF3) G.Down _ _) -> (gs, kb{keyF2 = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyF4) G.Down _ _) -> (gs, kb{keyF4 = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyF5) G.Down _ _) -> (gs, kb{keyF5 = KeyDown}) 
      Event (G.EventKey (G.SpecialKey G.KeyF6) G.Down _ _) -> (gs, kb{keyF6 = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyF7) G.Down _ _) -> (gs, kb{keyF7 = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyF8) G.Down _ _) -> (gs, kb{keyF8 = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyF9) G.Down _ _) -> (gs, kb{keyF9 = KeyDown}) 
      Event (G.EventKey (G.SpecialKey G.KeyF10) G.Down _ _) -> (gs, kb{keyF10 = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyF11) G.Down _ _) -> (gs, kb{keyF11 = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyF12) G.Down _ _) -> (gs, kb{keyF12 = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyUp) G.Down _ _) -> (gs, kb{keyUP = KeyDown}) 
      Event (G.EventKey (G.SpecialKey G.KeyDown) G.Down _ _) -> (gs, kb{keyDOWN = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyLeft) G.Down _ _) -> (gs, kb{keyLEFT = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyRight) G.Down _ _) -> (gs, kb{keyRIGHT = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyTab) G.Down _ _) -> (gs, kb{keyTAB = KeyDown}) 
      Event (G.EventKey (G.SpecialKey G.KeyEsc) G.Down _ _) -> (gs, kb{keyESC = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyHome) G.Down _ _) -> (gs, kb{keyHOME = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyPageUp) G.Down _ _) -> (gs, kb{keyRIGHT = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyPageDown) G.Down _ _) -> (gs, kb{keyPGUP = KeyDown}) 
      Event (G.EventKey (G.SpecialKey G.KeyInsert) G.Down _ _) -> (gs, kb{keyPGDOWN = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyDelete) G.Down _ _) -> (gs, kb{keyDELETE = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyEnter) G.Down _ _) -> (gs, kb{keyENTER = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyBackspace) G.Down _ _) -> (gs, kb{keyBACKSPACE = KeyDown}) 
      Event (G.EventKey (G.SpecialKey G.KeyCtrlL) G.Down _ _) -> (gs, kb{keyLCTRL = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyCtrlR) G.Down _ _) -> (gs, kb{keyRCTRL = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyAltL) G.Down _ _) -> (gs, kb{keyLALT = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyAltR) G.Down _ _) -> (gs, kb{keyRALT = KeyDown}) 
      Event (G.EventKey (G.SpecialKey G.KeyShiftL) G.Down _ _) -> (gs, kb{keyLSHIFT = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeyShiftR) G.Down _ _) -> (gs, kb{keyRSHIFT = KeyDown})
      Event (G.EventKey (G.SpecialKey G.KeySpace) G.Down _ _) -> (gs, kb{keySPACE = KeyDown})

      Event (G.EventKey (G.Char 'A') G.Down _ _) -> (gs, kb{keyA = KeyDown})
      Event (G.EventKey (G.Char 'B') G.Down _ _) -> (gs, kb{keyB = KeyDown})
      Event (G.EventKey (G.Char 'C') G.Down _ _) -> (gs, kb{keyC = KeyDown})
      Event (G.EventKey (G.Char 'D') G.Down _ _) -> (gs, kb{keyD = KeyDown})
      Event (G.EventKey (G.Char 'E') G.Down _ _) -> (gs, kb{keyE = KeyDown})
      Event (G.EventKey (G.Char 'F') G.Down _ _) -> (gs, kb{keyF = KeyDown})
      Event (G.EventKey (G.Char 'G') G.Down _ _) -> (gs, kb{keyG = KeyDown})
      Event (G.EventKey (G.Char 'H') G.Down _ _) -> (gs, kb{keyH = KeyDown})
      Event (G.EventKey (G.Char 'I') G.Down _ _) -> (gs, kb{keyI = KeyDown})
      Event (G.EventKey (G.Char 'J') G.Down _ _) -> (gs, kb{keyJ = KeyDown})
      Event (G.EventKey (G.Char 'K') G.Down _ _) -> (gs, kb{keyK = KeyDown})
      Event (G.EventKey (G.Char 'L') G.Down _ _) -> (gs, kb{keyL = KeyDown})
      Event (G.EventKey (G.Char 'M') G.Down _ _) -> (gs, kb{keyM = KeyDown})
      Event (G.EventKey (G.Char 'N') G.Down _ _) -> (gs, kb{keyN = KeyDown})
      Event (G.EventKey (G.Char 'O') G.Down _ _) -> (gs, kb{keyO = KeyDown})
      Event (G.EventKey (G.Char 'P') G.Down _ _) -> (gs, kb{keyP = KeyDown})
      Event (G.EventKey (G.Char 'Q') G.Down _ _) -> (gs, kb{keyQ = KeyDown})
      Event (G.EventKey (G.Char 'R') G.Down _ _) -> (gs, kb{keyR = KeyDown})
      Event (G.EventKey (G.Char 'S') G.Down _ _) -> (gs, kb{keyS = KeyDown})
      Event (G.EventKey (G.Char 'T') G.Down _ _) -> (gs, kb{keyT = KeyDown})
      Event (G.EventKey (G.Char 'U') G.Down _ _) -> (gs, kb{keyU = KeyDown})
      Event (G.EventKey (G.Char 'V') G.Down _ _) -> (gs, kb{keyV = KeyDown})
      Event (G.EventKey (G.Char 'W') G.Down _ _) -> (gs, kb{keyW = KeyDown})
      Event (G.EventKey (G.Char 'X') G.Down _ _) -> (gs, kb{keyX = KeyDown})
      Event (G.EventKey (G.Char 'Y') G.Down _ _) -> (gs, kb{keyY = KeyDown})
      Event (G.EventKey (G.Char 'Z') G.Down _ _) -> (gs, kb{keyZ = KeyDown})
      _ -> (gs, kb)


  updateState:: KeyState -> KeyState
  updateState KeyDown = IsPressed
  updateState KeyUp   = IsReleased
  updateState None    = IsReleased
  updateState s = s  

  updateKey :: (gs, Key) -> (gs, Key)
  updateKey (gs, key) = 
               (gs,key
               {
                 keyF1 = updateState (keyF1 key)
               , keyF2 = updateState (keyF2 key)
               , keyF3 = updateState (keyF3 key)
               , keyF4 = updateState (keyF4 key)
               , keyF5 = updateState (keyF5 key)
               , keyF6 = updateState (keyF6 key)
               , keyF7 = updateState (keyF7 key)
               , keyF8 = updateState (keyF8 key)
               , keyF9 = updateState (keyF9 key)
               , keyF10 = updateState (keyF10 key)
               , keyF11 = updateState (keyF11 key)
               , keyF12 = updateState (keyF12 key)
               , keyPAD0 = updateState (keyPAD0 key)
               , keyPAD1 = updateState (keyPAD1 key)
               , keyPAD2 = updateState (keyPAD2 key)
               , keyPAD3 = updateState (keyPAD3 key)
               , keyPAD4 = updateState (keyPAD4 key)
               , keyPAD5 = updateState (keyPAD5 key)
               , keyPAD6 = updateState (keyPAD6 key)
               , keyPAD7 = updateState (keyPAD7 key)
               , keyPAD8 = updateState (keyPAD8 key)
               , keyPAD9 = updateState (keyPAD9 key)
               , keyMINUS = updateState (keyMINUS key)
               , keyPLUS = updateState (keyPLUS key)
               , keyTAB  = updateState (keyTAB key)
               , keyESC = updateState (keyESC key)
               , keyHOME = updateState (keyHOME key)
               , keyPGUP = updateState (keyPGUP key)
               , keyPGDOWN = updateState (keyPGDOWN key)
               , keyINSERT = updateState (keyINSERT key)
               , keyDELETE = updateState (keyDELETE key)
               , keyENTER = updateState (keyENTER key)
               , keyBACKSPACE = updateState (keyBACKSPACE key)
               , keyLCTRL = updateState (keyLCTRL key)
               , keyRCTRL = updateState (keyRCTRL key)
               , keyLALT = updateState (keyLALT key)
               , keyRALT = updateState (keyRALT key)
               , keyLSHIFT = updateState (keyLSHIFT key)
               , keyRSHIFT = updateState (keyRSHIFT key)
               , keySPACE = updateState (keySPACE key)
               , keyUP = updateState (keyUP key)
               , keyDOWN = updateState (keyDOWN key)
               , keyLEFT = updateState (keyLEFT key)
               , keyRIGHT = updateState (keyRIGHT key)
               , keyA = updateState (keyA key)
               , keyB = updateState (keyB key)
               , keyC = updateState (keyC key)
               , keyD = updateState (keyD key)
               , keyE = updateState (keyE key)
               , keyF = updateState (keyF key)
               , keyG = updateState (keyG key)
               , keyH = updateState (keyH key)
               , keyI = updateState (keyI key)
               , keyJ = updateState (keyJ key)
               , keyK = updateState (keyK key)
               , keyL = updateState (keyL key)
               , keyM = updateState (keyM key)
               , keyN = updateState (keyN key)
               , keyO = updateState (keyO key)
               , keyP = updateState (keyP key)
               , keyQ = updateState (keyQ key)
               , keyR = updateState (keyR key)
               , keyS = updateState (keyS key)
               , keyT = updateState (keyT key)
               , keyU = updateState (keyU key)
               , keyV = updateState (keyV key)
               , keyW = updateState (keyW key)
               , keyX = updateState (keyX key)
               , keyY = updateState (keyY key)
               , keyZ = updateState (keyZ key)
               , keyLMOUSE = updateState (keyLMOUSE key)
               , keyRMOUSE = updateState (keyRMOUSE key)
               , keyMIDMOUSE = updateState (keyMIDMOUSE key)
               , keyWHEELUP = updateState (keyWHEELUP key)
               , keyWHEELDOWN = updateState (keyWHEELDOWN key)
               })
